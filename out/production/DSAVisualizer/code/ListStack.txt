#include <iostream>
#include <stdexcept>

class LinkedListStack {
private:
    struct Node {
        int data;
        Node* next;
        Node(int val) : data(val), next(nullptr) {}
    };

    Node* topNode;  // Pointer to the top of the stack
    int stackSize;  // Current size of the stack

public:
    // Constructor
    LinkedListStack() : topNode(nullptr), stackSize(0) {}

    // Destructor
    ~LinkedListStack() {
        while (!empty()) {
            pop();
        }
    }

    // Push an element onto the stack
    void push(int value) {
        Node* newNode = new Node(value);
        newNode->next = topNode;
        topNode = newNode;
        stackSize++;
    }

    // Pop an element from the stack
    int pop() {
        if (empty()) {
            throw std::runtime_error("Stack underflow: Cannot pop from empty stack");
        }
        Node* temp = topNode;
        int poppedValue = temp->data;
        topNode = topNode->next;
        delete temp;
        stackSize--;
        return poppedValue;
    }

    // Get the top element without removing it
    int top() const {
        if (empty()) {
            throw std::runtime_error("Stack is empty");
        }
        return topNode->data;
    }

    // Check if the stack is empty
    bool empty() const {
        return topNode == nullptr;
    }

    // Get the current size of the stack
    int size() const {
        return stackSize;
    }

    // Print the stack contents (top to bottom)
    void print() const {
        Node* current = topNode;
        std::cout << "Top -> ";
        while (current != nullptr) {
            std::cout << current->data;
            if (current->next != nullptr) {
                std::cout << " -> ";
            }
            current = current->next;
        }
        std::cout << " -> Bottom" << std::endl;
    }

    // Clear the stack
    void clear() {
        while (!empty()) {
            pop();
        }
    }
};