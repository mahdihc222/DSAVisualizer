#include <iostream>
#include <cstdlib> // for exit()

class Node {
public:
    int element;
    Node* next;
    Node* prev;

    Node(int val) : element(val), next(nullptr), prev(nullptr) {}
};

class LinkedList {
private:
    Node* head;
    int currentPos;
    int listSize;

    Node* findNodeAtPos(int pos) {
        if (pos < 0 || pos >= listSize) return nullptr;
        
        Node* temp = head;
        for (int i = 0; i < pos && temp != nullptr; i++) {
            temp = temp->next;
        }
        return temp;
    }

public:
    // Constructor
    LinkedList() : head(nullptr), currentPos(-1), listSize(0) {}

    // Destructor
    ~LinkedList() {
        clear();
    }

    void print() const {
        if (head == nullptr) {
            std::cout << "[.]" << std::endl;
            return;
        }

        Node* temp = head;
        std::cout << "[ ";
        int posChecker = 0;
        while (temp != nullptr) {
            std::cout << temp->element;
            if (posChecker == currentPos) std::cout << "|";
            std::cout << " ";
            temp = temp->next;
            posChecker++;
        }
        std::cout << "]" << std::endl;
    }

    void insert(int item) {
        Node* newNode = new Node(item);
        
        if (currentPos == -1) {
            // Empty list case
            head = newNode;
        } else {
            Node* current = findNodeAtPos(currentPos);
            if (current == nullptr) {
                // Shouldn't happen if list is consistent
                delete newNode;
                return;
            }
            
            newNode->next = current->next;
            newNode->prev = current;
            if (current->next != nullptr) {
                current->next->prev = newNode;
            }
            current->next = newNode;
        }
        
        currentPos++;
        listSize++;
        print();
    }

    int deleteCurrent() {
        if (currentPos == -1 || head == nullptr) {
            std::cerr << "Cannot delete from an empty list." << std::endl;
            return -3245; // error code
        }

        Node* toDelete;
        int deletedValue;

        if (currentPos == 0) {
            // Deleting head
            toDelete = head;
            head = head->next;
            if (head != nullptr) {
                head->prev = nullptr;
            }
        } else {
            toDelete = findNodeAtPos(currentPos);
            if (toDelete == nullptr) {
                return -3245; // error code
            }
            
            toDelete->prev->next = toDelete->next;
            if (toDelete->next != nullptr) {
                toDelete->next->prev = toDelete->prev;
            }
        }

        deletedValue = toDelete->element;
        delete toDelete;
        listSize--;
        
        if (listSize == currentPos) currentPos--;
        if (currentPos < 0 && listSize > 0) currentPos = 0;
        
        print();
        return deletedValue;
    }

    void append(int item) {
        Node* newNode = new Node(item);
        
        if (head == nullptr) {
            head = newNode;
            currentPos = 0;
        } else {
            Node* temp = head;
            while (temp->next != nullptr) {
                temp = temp->next;
            }
            temp->next = newNode;
            newNode->prev = temp;
        }
        
        listSize++;
        print();
    }

    int size() const {
        return listSize;
    }

    void prev(int n) {
        if (currentPos - n <= 0) {
            currentPos = 0;
        } else {
            currentPos -= n;
        }
        print();
    }

    void next(int n) {
        if (currentPos + n >= listSize) {
            currentPos = listSize - 1;
        } else {
            currentPos += n;
        }
        print();
    }

    bool isPresent(int item) const {
        Node* temp = head;
        while (temp != nullptr) {
            if (temp->element == item) {
                return true;
            }
            temp = temp->next;
        }
        return false;
    }

    void clear() {
        Node* current = head;
        while (current != nullptr) {
            Node* next = current->next;
            delete current;
            current = next;
        }
        head = nullptr;
        currentPos = -1;
        listSize = 0;
        print();
    }

    void deleteItem(int item) {
        if (head == nullptr) {
            return;
        }

        Node* temp = head;
        bool found = false;

        while (temp != nullptr) {
            if (temp->element == item) {
                found = true;
                
                if (temp == head) {
                    head = temp->next;
                    if (head != nullptr) {
                        head->prev = nullptr;
                    }
                } else {
                    temp->prev->next = temp->next;
                    if (temp->next != nullptr) {
                        temp->next->prev = temp->prev;
                    }
                }

                // Update current position if needed
                Node* toDelete = temp;
                temp = temp->next;
                
                delete toDelete;
                listSize--;
                
                // Adjust current position
                if (listSize == currentPos) currentPos--;
                if (currentPos >= listSize) currentPos = listSize - 1;
                if (listSize == 0) currentPos = -1;
            } else {
                temp = temp->next;
            }
        }

        if (found) {
            print();
        } else {
            std::cout << item << " not found" << std::endl;
        }
    }

    void swapIndices(int ind1, int ind2) {
        if (ind1 == ind2) return;
        if (ind1 < 0 || ind2 < 0 || ind1 >= listSize || ind2 >= listSize) {
            std::cerr << "Invalid index. Item does not exist." << std::endl;
            return;
        }

        // Ensure ind1 is smaller than ind2
        if (ind1 > ind2) {
            std::swap(ind1, ind2);
        }

        Node* node1 = findNodeAtPos(ind1);
        Node* node2 = findNodeAtPos(ind2);

        if (node1 == nullptr || node2 == nullptr) {
            return;
        }

        // Special case: adjacent nodes
        if (node1->next == node2) {
            node1->next = node2->next;
            node2->prev = node1->prev;
            
            if (node1->prev != nullptr) {
                node1->prev->next = node2;
            }
            node1->prev = node2;
            
            if (node2->next != nullptr) {
                node2->next->prev = node1;
            }
            node2->next = node1;
        } else {
            // General case: non-adjacent nodes
            // Update surrounding nodes' pointers
            if (node1->prev != nullptr) {
                node1->prev->next = node2;
            }
            if (node1->next != nullptr) {
                node1->next->prev = node2;
            }
            
            if (node2->prev != nullptr) {
                node2->prev->next = node1;
            }
            if (node2->next != nullptr) {
                node2->next->prev = node1;
            }
            
            // Swap prev pointers
            std::swap(node1->prev, node2->prev);
            
            // Swap next pointers
            std::swap(node1->next, node2->next);
        }

        // Update head if necessary
        if (head == node1) {
            head = node2;
        } else if (head == node2) {
            head = node1;
        }

        print();
    }
};